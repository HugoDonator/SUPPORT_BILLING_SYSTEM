@using System.Text.Json
@model SupportBilling.Web.Models.InvoiceViewModel

@{
    ViewData["Title"] = "Create Invoice";
}

<h1>Create Invoice</h1>

<div class="row">
    <div class="col-md-6">
        <form id="invoiceForm">
            <!-- Client -->
            <div class="form-group mb-3">
                <label for="ClientId">Client</label>
                <select id="ClientId" class="form-control">
                    <option value="">-- Select Client --</option>
                    @foreach (var client in ViewBag.Clients)
                    {
                        <option value="@client.Value">@client.Text</option>
                    }
                </select>
            </div>

            <!-- Invoice Date -->
            <div class="form-group mb-3">
                <label for="InvoiceDate">Invoice Date</label>
                 <input id="InvoiceDate" type="date" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
            </div>

            <!-- Tax -->
            <div class="form-group mb-3">
                <label for="Tax">Tax (%)</label>
                <input id="Tax" type="number" class="form-control" oninput="calculateTotal()" />
            </div>

            <!-- Invoice Details -->
            <div>
                <h4>Invoice Details</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Service</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="invoice-details-body"></tbody>
                </table>
                <button type="button" class="btn btn-secondary" onclick="addInvoiceDetail()">Add Service</button>
            </div>

            <!-- Subtotal -->
            <div class="form-group mb-3">
                <label for="Subtotal">Subtotal</label>
                <input id="Subtotal" class="form-control" readonly />
            </div>

            <!-- Total Amount -->
            <div class="form-group mb-3">
                <label for="TotalAmount">Total Amount</label>
                <input id="TotalAmount" class="form-control" readonly />
            </div>

            <div class="form-group mb-3">
                <label for="Status">Status</label>
                <select id="Status" class="form-control">
                <option value="Pending">Pending</option>
                <option value="Paid">Paid</option>
                <option value="Canceled">Canceled</option>
            </select>
        </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary">Create</button>
            <a href="/Invoices/Index" class="btn btn-secondary">Back to Index</a>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        const services = @Html.Raw(JsonSerializer.Serialize(ViewBag.Services));
        let detailIndex = 0;

        document.getElementById("invoiceForm").addEventListener("submit", async (event) => {
            event.preventDefault();

            // Construir el objeto JSON
            const invoice = {
                ClientId: document.getElementById("ClientId").value,
                InvoiceDate: document.getElementById("InvoiceDate").value,
                Tax: parseFloat(document.getElementById("Tax").value || 0),
                Status: document.getElementById("Status").value,
                InvoiceDetails: []
            };

            document.querySelectorAll("#invoice-details-body tr").forEach(row => {
                const serviceId = row.querySelector('[name*="ServiceId"]').value;
                const quantity = row.querySelector('[name*="Quantity"]').value;
                const price = row.querySelector('.price').value;

                if (serviceId && quantity && price) {
                    invoice.InvoiceDetails.push({
                        ServiceId: parseInt(serviceId),
                        Quantity: parseInt(quantity),
                        Price: parseFloat(price)
                    });
                }
            });

            // Enviar los datos como JSON
            const response = await fetch('/Invoices/Create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(invoice)
            });

            if (response.ok) {
                window.location.href = '/Invoices/Index';
            } else {
                const error = await response.text();
                alert("Error al guardar la factura: " + error);
            }
        });

        function addInvoiceDetail() {
            const row = `
                <tr>
                    <td>
                        <select name="InvoiceDetails[${detailIndex}].ServiceId" class="form-control" onchange="updatePrice(this)">
                            <option value="">-- Select Service --</option>
                            ${services.map(s => `<option value="${s.Id}">${s.Name}</option>`).join('')}
                        </select>
                    </td>
                    <td>
                        <input name="InvoiceDetails[${detailIndex}].Quantity" class="form-control" oninput="updateTotal(this)" />
                    </td>
                    <td>
                        <input name="InvoiceDetails[${detailIndex}].Price" class="form-control price" readonly />
                    </td>
                    <td>
                        <input class="form-control total" readonly />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                    </td>
                </tr>
            `;
            document.getElementById("invoice-details-body").insertAdjacentHTML("beforeend", row);
            detailIndex++;
        }

        function updatePrice(select) {
            const service = services.find(s => s.Id == select.value);
            const row = select.closest('tr');
            row.querySelector('.price').value = service ? service.Price : 0;
            updateTotal(row.querySelector('[name*="Quantity"]'));
        }

        function updateTotal(input) {
            const row = input.closest('tr');
            const quantity = parseFloat(input.value) || 0;
            const price = parseFloat(row.querySelector('.price').value) || 0;
            row.querySelector('.total').value = (quantity * price).toFixed(2);
            calculateTotal();
        }

        function calculateTotal() {
            const totals = [...document.querySelectorAll('.total')];
            const subtotal = totals.reduce((sum, el) => sum + parseFloat(el.value || 0), 0);
            document.getElementById("Subtotal").value = subtotal.toFixed(2);
            const tax = parseFloat(document.getElementById("Tax").value || 0);
            document.getElementById("TotalAmount").value = (subtotal + (subtotal * tax / 100)).toFixed(2);
        }

        function removeRow(button) {
            button.closest('tr').remove();
            calculateTotal();
        }
    </script>
}
