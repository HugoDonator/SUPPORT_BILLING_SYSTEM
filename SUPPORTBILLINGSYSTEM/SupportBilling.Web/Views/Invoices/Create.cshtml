@model SupportBilling.Web.Models.CreateInvoiceViewModel

<h2>Crear Factura</h2>

<form asp-action="Create" method="post">
    <div class="form-group">
        <label for="ClientId">Cliente</label>
        <select asp-for="SelectedClientId" asp-items="@(new SelectList(Model.Clients, "Id", "Name"))" class="form-control">
            <option value="">Seleccione un cliente</option>
        </select>
    </div>

    <h4>Servicios</h4>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Servicio</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody id="service-list">
            <tr>
                <td>
                    <select name="SelectedServices[0].ServiceId" class="form-control service-select">
                        <option value="">Seleccione un servicio</option>
                        @foreach (var service in Model.Services)
                        {
                            <option value="@service.Id">@service.Name</option>
                        }
                    </select>
                </td>
                <td>
                    <input name="SelectedServices[0].Quantity" class="form-control quantity-input" type="number" min="1" value="1" />
                </td>
                <td>
                    <span class="price">0.00</span>
                </td>
                <td>
                    <button type="button" class="btn btn-danger remove-service">Eliminar</button>
                </td>
            </tr>
        </tbody>
    </table>
    <button type="button" class="btn btn-success" id="add-service">Añadir Servicio</button>

    <div class="form-group mt-3">
        <label>Subtotal:</label>
        <span id="subtotal">0.00</span>
    </div>
    <div class="form-group">
        <label>Impuesto (18%):</label>
        <span id="tax">0.00</span>
    </div>
    <div class="form-group">
        <label>Total:</label>
        <span id="total">0.00</span>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Crear Factura</button>
</form>

@section Scripts {
    <script>
        // Almacenar servicios con precios en un objeto
        const services = @Html.Raw(Json.Serialize(Model.Services.ToDictionary(s => s.Id, s => s.Price)));

        // Generar un select con los servicios disponibles
        function generateServiceSelect(index) {
            let options = '<option value="">Seleccione un servicio</option>';
            for (const [id, price] of Object.entries(services)) {
                options += `<option value="${id}">${id}</option>`;
            }
            return `<select name="SelectedServices[${index}].ServiceId" class="form-control service-select">${options}</select>`;
        }

        function recalculateTotals() {
            let subtotal = 0;

            // Recorrer cada fila de servicio y calcular subtotales
            document.querySelectorAll("#service-list tr").forEach((row) => {
                const serviceId = row.querySelector(".service-select").value;
                const quantity = row.querySelector(".quantity-input").value;

                if (serviceId && quantity > 0) {
                    const price = services[serviceId] || 0;
                    const lineTotal = price * quantity;

                    row.querySelector(".price").textContent = lineTotal.toFixed(2);
                    subtotal += lineTotal;
                }
            });

            const taxRate = 0.18; // Tasa fija del 18%
            const tax = subtotal * taxRate;
            const total = subtotal + tax;

            // Actualizar los valores en la vista
            document.getElementById("subtotal").textContent = subtotal.toFixed(2);
            document.getElementById("tax").textContent = tax.toFixed(2);
            document.getElementById("total").textContent = total.toFixed(2);
        }

        // Añadir una nueva fila de servicio
        document.getElementById("add-service").addEventListener("click", function () {
            const tableBody = document.getElementById("service-list");
            const index = tableBody.querySelectorAll("tr").length;
            const newRow = document.createElement("tr");

            newRow.innerHTML = `
                <td>${generateServiceSelect(index)}</td>
                <td>
                    <input name="SelectedServices[${index}].Quantity" class="form-control quantity-input" type="number" min="1" value="1" />
                </td>
                <td>
                    <span class="price">0.00</span>
                </td>
                <td>
                    <button type="button" class="btn btn-danger remove-service">Eliminar</button>
                </td>
            `;

            tableBody.appendChild(newRow);
        });

        // Eliminar una fila de servicio
        document.getElementById("service-list").addEventListener("click", function (e) {
            if (e.target.classList.contains("remove-service")) {
                e.target.closest("tr").remove();
                recalculateTotals();
            }
        });

        // Recalcular totales al cambiar servicio o cantidad
        document.getElementById("service-list").addEventListener("change", function (e) {
            if (e.target.classList.contains("service-select") || e.target.classList.contains("quantity-input")) {
                recalculateTotals();
            }
        });

        // Recalcular totales al cargar la página
        recalculateTotals();
    </script>
}
